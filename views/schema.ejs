<html>

<head>
  <title>Express</title>
  <style>
    body {
      margin: 0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

    header {
      background-color: gray;
    }

    nav > ul {
      list-style: none;
      display: flex;
      gap: 10px;
    }

    main {
      display: flex;
      justify-content: center;
      align-items: center;
      flex:1;
    }

    main > div {
      padding: 5px;
      border-radius: 5px;
      background-color: gray;
    }

    .buttons {
      display: flex;
    }

    .buttons > * {
      flex: 1;
    }

    .table {
      background-color: white;
      border-radius: 5px;
      display: grid;
      column-gap: 10px;
      justify-items: center;
      grid-template-columns: <%= "20px auto auto ".concat(columns.map(()=>"auto").join(" "))%>;
    }
  </style>
</head>

<body>
  <%- include('partials/header') %>
  <main>
    <div>
      <div class="buttons">
        <button>New Sources</button>
        <button>Current Sources</button>
      </div>
      <div class="table">
        <div class="row-0"></div>
        <div class="row-0">approved?</div>
        <div class="row-0">monitor this link?</div>
        <% columns.forEach(col => {%>
          <div class="row-0"><%= col %></div>
        <% }); %>
      </div>
      <button class="submit">submit</button>
    </div>
  </main>
  <script>
    const columns = [<%columns.forEach(str=>{ %> "<%= str%>",  <%})%>];
    const table = document.querySelector('.table');
    const [button1, button2] = document.querySelectorAll('.buttons > *');
    const submitButton = document.querySelector('.submit');

    function makeElement(tag, text, id, ...classes) {
      const element = document.createElement(tag);
      if (text) element.textContent = text;
      if (id) element.id = id;
      if (classes && classes.length !== 0) classes.forEach(newClass => element.classList.add(newClass));

      return element;
    }

    function deleteAllRows() {
      const deleteIndex = columns.length + 3;
      while (table.childElementCount > deleteIndex) table.removeChild(table.children.item(deleteIndex));
    }

    function makeOnClick(willSearchNew) {
      return async () => {
        const res = await fetch(willSearchNew ? "/api/new-sources/" : "/api/current-sources/", {
          method: "POST",
          body: JSON.stringify({lastSearchDate: "2020"}), //TODO: storing/retriving last search date
          headers: {
            "Content-Type": "application/json"
          }
        });

        const {data} = await res.json();

        data.forEach(entry=>{
          const newRow =  columns.map(col=>entry[col]);
          const rowNumber = Number(Array.from(table.lastElementChild.classList).find(x=>x.startsWith("row-")).slice(4)) + 1;


          const rowNumberDiv = makeElement('div', rowNumber, null, `row-${rowNumber}`);

          const approvedCheckbox = makeElement('input', null, `row-${rowNumber}`, 'approved');
          approvedCheckbox.type = 'checkbox';
          
          const monitorCheckbox = makeElement('input', null, `row-${rowNumber}`, 'monitor');
          monitorCheckbox.type = 'checkbox';

          table.appendChild(rowNumberDiv);
          table.appendChild(approvedCheckbox);
          table.appendChild(monitorCheckbox);

          newRow.forEach((field,index) => {
            table.appendChild(makeElement('div', field, null, `row-${rowNumber}`, columns[index]));
          });
        });
      }
    }

    button1.addEventListener("click", makeOnClick(true));
    button2.addEventListener("click", makeOnClick(false));

    submitButton.addEventListener("click", async () => {
      const approvedCheckboxes = document.querySelectorAll('input[type="checkbox"].approved');
      const rows = [];

      approvedCheckboxes.forEach(box => {
        if (!box.checked) return;
        const row = {};
        columns.forEach(col => {
          const query = `.${box.id}.${col}`;
          row[col] = document.querySelector(query)?.textContent || ""
        });
        rows.push(row);
      });

      await fetch("/api/update-db", {
        method: "POST",
        body: JSON.stringify({data: rows}),
        headers: {
          "Content-Type": "application/json",
        }
      });

      const monitorCheckboxes = document.querySelectorAll('input[type="checkbox"].monitor');
      const newUrls = [];

      monitorCheckboxes.forEach(box => {
        if (!box.checked) return;

        const longUrl = document.querySelector(`.${box.id}.url`).textContent;
        const match = longUrl.match(/^(https?:\/\/[^\/]+)/);
        const shortUrl = match ? match[1] : "";

        newUrls.push(shortUrl);
      });

      await fetch("/api/update-urls", {
        method: "POST",
        body: JSON.stringify({newUrls}),
        headers: {
          "Content-Type": "application/json",
        }
      });

      deleteAllRows();
    });
  </script>
</body>

</html>
